<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.prb.erp.domain.tcher.assign.TcherAssignManageMapper">
 
 	<!-- 교사조회(배정) 페이징 -->
    <select id="getTcherAssignList" resultType="tcherAssignManageVO" parameterType="hashMap" statementType="PREPARED">   
    	DECLARE @RowsPerPage INT = 10, @PageNumber INT = #{map.pageNumber}
    	SELECT * FROM (
			SELECT   
					 A.CUST_CD custCd,
			         C.CHILD_CD childCd,
			         A.GD1_NM gd1Nm,
			         A.GD1_RELATION_CD gd1RelationCd,
			         DBO.FN_BASECODE('GD_RELATION_CD',A.GD1_RELATION_CD,'') gd1RelationCdNm,
			         A.GD1_BIRTHDAY gd1Birthday,
			         A.GD2_NM gd2Nm,
			         A.GD2_RELATION_CD gd2RelationCd,
			         DBO.FN_BASECODE('GD_RELATION_CD',A.GD2_RELATION_CD,'') gd2RelationCdNm,
			         A.GD2_BIRTHDAY gd2Birthday,
			         A.TEL_NO telNo,
			         A.HP_NO hpNo,
			         A.EMAIL email,
			         A.HOME_ZIPCODE homeZipcode,
			         A.HOME_ADDRESS1 homeAddress1,
			         A.HOME_ADDRESS2 homeAddress2,
			         A.DELIVERY_ZIPCODE deliveryZipcode,
			         A.DELIVERY_ADDRESS1 deliveryAddress1,
			         A.DELIVERY_ADDRESS2 deliveryAddress2,
			         B.CONTRACT_DT contractDt,
			         B.GOODS_CD goodsCd,
         			(SELECT Z.GOODS_NM FROM TB_ERP_GOODS000 Z WHERE Z.GOODS_CD = B.GOODS_CD) goodsNm,
			         B.SUBJECT_NM subjectNm,
			         B.AGREEMENT_CD agreementCd,
			         DBO.FN_BASECODE('AGREEMENT_CD',B.AGREEMENT_CD,'') agreementCdNm,
			         B.TOTAL_PRICE totalPrice,
			         B.MONTH_PRICE monthPrice,
			         B.CONTRACT_PRICE contractPrice,
			         
			         B.CONTRACT_PAYMENT_WAY contractPaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',B.CONTRACT_PAYMENT_WAY,'') contractPaymentWayNm,			         
			         B.CONTRACT_PAYMENT_METHOD contractPaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',B.CONTRACT_PAYMENT_METHOD,'') contractPaymentMethodNm,			         
			         B.PAYMENT_PRICE paymentPrice,
			         B.PAYMENT_WAY paymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',B.PAYMENT_WAY,'') paymentWayNm,			         
			         B.PAYMENT_METHOD paymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',B.PAYMENT_METHOD,'') paymentMethodNm,			   
			         B.PAYMENT_YN paymentYn,
			         DBO.FN_BASECODE('PAYMENT_YN',B.PAYMENT_YN,'') paymentYnNm,
			         C.CHILDREN_CONTRACT_DT childrenContractDt,
			         C.CONTRACT_TYPE contractType,
			         DBO.FN_BASECODE('CONTRACT_TYPE',C.CONTRACT_TYPE,'') contractTypeNm,
		             C.CHILDREN_USER_CD childrenUserCd,
			         C.CHILDREN_NM childrenNm,
			         C.CHILDREN_SEX childrenSex,
			         DBO.FN_BASECODE('SEX',C.CHILDREN_SEX,'') childrenSexNm,
			         C.CHILDREN_BIRTHDAY childrenBirthday,
			         C.CHILDREN_HP_NO childrenHpNo,
			         C.CHILDREN_SCHOOL_NM childrenSchoolNm,
			         C.CHILDREN_GRADE_CD childrenGradeCd,
			         DBO.FN_BASECODE('GRADE_CD',C.CHILDREN_GRADE_CD,'') childrenGradeCdNm,
			         
			         C.ONLINE_SERVICE_STATUS onlineServiceStatus,
			         DBO.FN_BASECODE('ONLINE_SERVICE_STATUS',C.ONLINE_SERVICE_STATUS,'') onlineServiceStatusNm,
			         C.ONLINE_SERVICE_YN onlineServiceYn,
			         DBO.FN_BASECODE('ONLINE_SERVICE_YN',C.ONLINE_SERVICE_YN,'') onlineServiceYnNm,
			         C.ONLINE_SERVICE_PRICE onlineServicePrice,
			         C.VISIT_SERVICE_STATUS visitServiceStatus,
			         DBO.FN_BASECODE('VISIT_SERVICE_STATUS',C.VISIT_SERVICE_STATUS,'') visitServiceStatusNm,
			         C.VISIT_SERVICE_YN visitServiceYn,
			         DBO.FN_BASECODE('VISIT_SERVICE_YN',C.VISIT_SERVICE_YN,'') visitServiceYnNm,	
			         
			         C.VISIT_TIME_CD visitTimeCd,
			         DBO.FN_BASECODE('VISIT_TIME_CD',C.VISIT_TIME_CD,'') visitTimeCdNm,
			         
			         C.VISIT_NUMBER_CD visitNumberCd,
			         DBO.FN_BASECODE('VISIT_NUMBER_CD',C.VISIT_NUMBER_CD,'') visitNumberCdNm,
			         
			         
			         C.ONLINE_PAYMENT_WAY onlinePaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',C.ONLINE_PAYMENT_WAY,'') onlinePaymentWayNm,
			         C.VISIT_PAYMENT_WAY visitPaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',C.VISIT_PAYMENT_WAY,'') visitPaymentWayNm,
			         
			         C.ONLINE_PAYMENT_METHOD onlinePaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',C.ONLINE_PAYMENT_METHOD,'') onlinePaymentMethodNm,
			         C.VISIT_PAYMENT_METHOD visitPaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',C.VISIT_PAYMENT_METHOD,'') visitPaymentMethodNm,
			       
			         C.VISIT_START_DT visitStartDt,
			         C.VISIT_END_DT visitEndDt,  
			         
			         C.VISIT_SERVICE_PRICE visitServicePrice,
			         
			         A.AREA_CD areaCd,
			         (SELECT Z.AREA_NM FROM TB_ERP_AREA000 Z WHERE Z.AREA_CD = A.AREA_CD) areaNm,
			         A.ORG_CD orgCd,
			         (SELECT Z.ORG_NM FROM TB_ERP_AREA100 Z WHERE Z.ORG_CD = A.ORG_CD AND Z.ORG_CLASS='12') orgNm,
			         A.AREA_HP_NO areaHpNo,
			         C.COUNSELOR1_TCHER_CD counselor1TcherCd,
			         (SELECT TCHER_NM FROM TB_ERP_TCHER000 Z WHERE Z.TCHER_CD = C.COUNSELOR1_TCHER_CD) counselor1TcherNm,
			         C.COUNSELOR1_TCHER_HP_NO counselor1TcherHpNo,
			         C.COUNSELOR2_TCHER_CD counselor2TcherCd,
			         (SELECT TCHER_NM FROM TB_ERP_TCHER000 Z WHERE Z.TCHER_CD = C.COUNSELOR2_TCHER_CD) counselor2TcherNm,
			         C.COUNSELOR2_TCHER_HP_NO counselor2TcherHpNo,
			         DBO.FN_VISIT_TCHERCD(C.CUST_CD , C.CHILD_CD) visitorTcherCd,
			         DBO.FN_VISIT_TCHERNM(C.CUST_CD , C.CHILD_CD) visitorTcherNm,
			     	 DBO.FN_VISIT_TCHERHPNO(C.CUST_CD , C.CHILD_CD) visitorTcherHpNo,
			         C.REMARK,
			         A.CREATED_AT createdAt,
			         A.CREATED_BY createdBy,
			         A.UPDATED_AT updatedAt,
			         A.UPDATED_BY updatedBy,
			         E.USER_CD regUserCd,
			         E.USER_NM regUserNm,
			         CONVERT(CHAR(10), A.UPDATED_AT, 23) regDt,
			         ROW_NUMBER() OVER (ORDER BY A.UPDATED_AT ASC) AS RowNum,
			         ROW_NUMBER() OVER (ORDER BY A.UPDATED_AT DESC) AS RowNum2
			FROM     TB_ERP_MEMBER000 A
			         INNER JOIN TB_ERP_MEMBER100 B
			         ON       A.CUST_CD = B.CUST_CD
			         INNER JOIN TB_ERP_MEMBER200 C
			         ON       A.CUST_CD = C.CUST_CD
			         INNER JOIN TB_ERP_USER000 E
			         ON       A.UPDATED_BY = E.USER_CD    
			WHERE    1=1

			<!-- 방문교사 학습휴식신청/ 교사미배정 // 계약취소가 아닌경우만 --> 
			AND C.VISIT_SERVICE_STATUS IN ('50','70')
			AND	C.MEMBER_STATUS = '1'
			<!-- 기본계약/ 형제추가일 경우만 :: 시간.횟수추가는 제외 -->
			AND C.CONTRACT_TYPE != '3'
			
			<!-- 회원계약코드 -->				
			<if test="map.custCd != null and map.custCd != ''">  
					AND A.CUST_CD = #{map.custCd}
			</if>      
						
			<!-- 검색유형 학생명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '10'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   C.CHILDREN_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>       
	        	
			<!-- 검색유형 학부모명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '20'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   A.GD1_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학생휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '30'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(C.CHILDREN_HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학무모휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '40'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(A.HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 주소-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '50'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   (A.HOME_ZIPCODE LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS1 LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS2 LIKE UPPER('%'+#{map.searchText}+'%'))
		  			]]>
			</if>     
			
			) AS SO
	   
		WHERE SO.RowNum2 BETWEEN ((@PageNumber-1)*@RowsPerPage)+1
		AND @RowsPerPage*(@PageNumber)
    </select>
    
    <!-- 교사조회 카운트 -->
    <select id="getTcherAssignListCount" resultType="java.lang.Integer" parameterType="hashMap" statementType="PREPARED">   
			SELECT   COUNT(1)
			FROM     TB_ERP_MEMBER000 A
			         INNER JOIN TB_ERP_MEMBER100 B
			         ON       A.CUST_CD = B.CUST_CD
			         INNER JOIN TB_ERP_MEMBER200 C
			         ON       A.CUST_CD = C.CUST_CD
			WHERE    1=1
			
			<!-- 방문교사 학습휴식신청/ 교사미배정 --> 
			AND C.VISIT_SERVICE_STATUS IN ('50','70')
			AND	C.MEMBER_STATUS = '1'
			
			<!-- 기본계약/ 형제추가일 경우만 :: 시간.횟수추가는 제외 -->
			AND C.CONTRACT_TYPE != '3'
			
			<!-- 회원계약코드 -->				
			<if test="map.custCd != null and map.custCd != ''">  
					AND A.CUST_CD = #{map.custCd}
			</if>      
			
						
			<!-- 검색유형 학생명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '10'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   C.CHILDREN_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>       
	        	
			<!-- 검색유형 학부모명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '20'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   A.GD1_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학생휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '30'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(C.CHILDREN_HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학무모휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '40'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(A.HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 주소-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '50'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   (A.HOME_ZIPCODE LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS1 LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS2 LIKE UPPER('%'+#{map.searchText}+'%'))
		  			]]>
			</if>     
    </select>
    
    <!-- 교사조회(배정) 단건 -->
    <select id="getTcherAssign" resultType="tcherAssignManageVO" parameterType="hashMap" statementType="PREPARED">   
			SELECT   
					 A.CUST_CD custCd,
			         C.CHILD_CD childCd,
			         A.GD1_NM gd1Nm,
			         A.GD1_RELATION_CD gd1RelationCd,
			         DBO.FN_BASECODE('GD_RELATION_CD',A.GD1_RELATION_CD,'') gd1RelationCdNm,
			         A.GD1_BIRTHDAY gd1Birthday,
			         A.GD2_NM gd2Nm,
			         A.GD2_RELATION_CD gd2RelationCd,
			         DBO.FN_BASECODE('GD_RELATION_CD',A.GD2_RELATION_CD,'') gd2RelationCdNm,
			         A.GD2_BIRTHDAY gd2Birthday,
			         A.TEL_NO telNo,
			         A.HP_NO hpNo,
			         A.EMAIL email,
			         A.HOME_ZIPCODE homeZipcode,
			         A.HOME_ADDRESS1 homeAddress1,
			         A.HOME_ADDRESS2 homeAddress2,
			         A.DELIVERY_ZIPCODE deliveryZipcode,
			         A.DELIVERY_ADDRESS1 deliveryAddress1,
			         A.DELIVERY_ADDRESS2 deliveryAddress2,
			         B.CONTRACT_DT contractDt,
			         B.GOODS_CD goodsCd,
         			(SELECT Z.GOODS_NM FROM TB_ERP_GOODS000 Z WHERE Z.GOODS_CD = B.GOODS_CD) goodsNm,
			         B.SUBJECT_NM subjectNm,
			         B.AGREEMENT_CD agreementCd,
			         DBO.FN_BASECODE('AGREEMENT_CD',B.AGREEMENT_CD,'') agreementCdNm,
			         B.TOTAL_PRICE totalPrice,
			         B.MONTH_PRICE monthPrice,
			         B.CONTRACT_PRICE contractPrice,
			         
			         B.CONTRACT_PAYMENT_WAY contractPaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',B.CONTRACT_PAYMENT_WAY,'') contractPaymentWayNm,			         
			         B.CONTRACT_PAYMENT_METHOD contractPaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',B.CONTRACT_PAYMENT_METHOD,'') contractPaymentMethodNm,			         
			         B.PAYMENT_PRICE paymentPrice,
			         B.PAYMENT_WAY paymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',B.PAYMENT_WAY,'') paymentWayNm,			         
			         B.PAYMENT_METHOD paymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',B.PAYMENT_METHOD,'') paymentMethodNm,			   
			         B.PAYMENT_YN paymentYn,
			         DBO.FN_BASECODE('PAYMENT_YN',B.PAYMENT_YN,'') paymentYnNm,
			         C.CHILDREN_CONTRACT_DT childrenContractDt,
			         C.CONTRACT_TYPE contractType,
			         DBO.FN_BASECODE('CONTRACT_TYPE',C.CONTRACT_TYPE,'') contractTypeNm,
		             C.CHILDREN_USER_CD childrenUserCd,
			         C.CHILDREN_NM childrenNm,
			         C.CHILDREN_SEX childrenSex,
			         DBO.FN_BASECODE('SEX',C.CHILDREN_SEX,'') childrenSexNm,
			         C.CHILDREN_BIRTHDAY childrenBirthday,
			         C.CHILDREN_HP_NO childrenHpNo,
			         C.CHILDREN_SCHOOL_NM childrenSchoolNm,
			         C.CHILDREN_GRADE_CD childrenGradeCd,
			         DBO.FN_BASECODE('GRADE_CD',C.CHILDREN_GRADE_CD,'') childrenGradeCdNm,
			         
			         C.ONLINE_SERVICE_STATUS onlineServiceStatus,
			         DBO.FN_BASECODE('ONLINE_SERVICE_STATUS',C.ONLINE_SERVICE_STATUS,'') onlineServiceStatusNm,
			         C.ONLINE_SERVICE_YN onlineServiceYn,
			         DBO.FN_BASECODE('ONLINE_SERVICE_YN',C.ONLINE_SERVICE_YN,'') onlineServiceYnNm,
			         C.ONLINE_SERVICE_PRICE onlineServicePrice,
			         C.VISIT_SERVICE_STATUS visitServiceStatus,
			         DBO.FN_BASECODE('VISIT_SERVICE_STATUS',C.VISIT_SERVICE_STATUS,'') visitServiceStatusNm,
			         C.VISIT_SERVICE_YN visitServiceYn,
			         DBO.FN_BASECODE('VISIT_SERVICE_YN',C.VISIT_SERVICE_YN,'') visitServiceYnNm,		
			         
			         C.VISIT_TIME_CD visitTimeCd,
			         DBO.FN_BASECODE('VISIT_TIME_CD',C.VISIT_TIME_CD,'') visitTimeCdNm,
			         
			         C.VISIT_NUMBER_CD visitNumberCd,
			         DBO.FN_BASECODE('VISIT_NUMBER_CD',C.VISIT_NUMBER_CD,'') visitNumberCdNm,
			         
			         
			         C.ONLINE_PAYMENT_WAY onlinePaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',C.ONLINE_PAYMENT_WAY,'') onlinePaymentWayNm,
			         C.VISIT_PAYMENT_WAY visitPaymentWay,
			         DBO.FN_BASECODE('PAYMENT_WAY',C.VISIT_PAYMENT_WAY,'') visitPaymentWayNm,
			         
			         C.ONLINE_PAYMENT_METHOD onlinePaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',C.ONLINE_PAYMENT_METHOD,'') onlinePaymentMethodNm,
			         C.VISIT_PAYMENT_METHOD visitPaymentMethod,
			         DBO.FN_BASECODE('PAYMENT_METHOD',C.VISIT_PAYMENT_METHOD,'') visitPaymentMethodNm,
			        
			         C.VISIT_START_DT visitStartDt,
			         C.VISIT_END_DT visitEndDt, 
			         
			         C.VISIT_SERVICE_PRICE visitServicePrice,
			         
			         A.AREA_CD areaCd,
			         (SELECT Z.AREA_NM FROM TB_ERP_AREA000 Z WHERE Z.AREA_CD = A.AREA_CD) areaNm,
			         A.ORG_CD orgCd,
			         (SELECT Z.ORG_NM FROM TB_ERP_AREA100 Z WHERE Z.ORG_CD = A.ORG_CD AND Z.ORG_CLASS='12') orgNm,
			         A.AREA_HP_NO areaHpNo,
			         C.COUNSELOR1_TCHER_CD counselor1TcherCd,
			         (SELECT TCHER_NM FROM TB_ERP_TCHER000 Z WHERE Z.TCHER_CD = C.COUNSELOR1_TCHER_CD) counselor1TcherNm,
			         C.COUNSELOR1_TCHER_HP_NO counselor1TcherHpNo,
			         C.COUNSELOR2_TCHER_CD counselor2TcherCd,
			         (SELECT TCHER_NM FROM TB_ERP_TCHER000 Z WHERE Z.TCHER_CD = C.COUNSELOR2_TCHER_CD) counselor2TcherNm,
			         C.COUNSELOR2_TCHER_HP_NO counselor2TcherHpNo,
			         DBO.FN_VISIT_TCHERCD(C.CUST_CD , C.CHILD_CD) visitorTcherCd,
			         DBO.FN_VISIT_TCHERNM(C.CUST_CD , C.CHILD_CD) visitorTcherNm,
			    	 DBO.FN_VISIT_TCHERHPNO(C.CUST_CD , C.CHILD_CD) visitorTcherHpNo,
			         C.REMARK,
			         A.CREATED_AT createdAt,
			         A.CREATED_BY createdBy,
			         A.UPDATED_AT updatedAt,
			         A.UPDATED_BY updatedBy,
			         E.USER_CD regUserCd,
			         E.USER_NM regUserNm,
			         CONVERT(CHAR(10), A.UPDATED_AT, 23) regDt,
			         ROW_NUMBER() OVER (ORDER BY A.UPDATED_AT) AS RowNum
			FROM     TB_ERP_MEMBER000 A
			         INNER JOIN TB_ERP_MEMBER100 B
			         ON       A.CUST_CD = B.CUST_CD
			         INNER JOIN TB_ERP_MEMBER200 C
			         ON       A.CUST_CD = C.CUST_CD
			         INNER JOIN TB_ERP_USER000 E
			         ON       A.UPDATED_BY = E.USER_CD    
			WHERE    1=1

			<!-- 방문교사 학습휴식신청/ 교사미배정 --> 
			AND C.VISIT_SERVICE_STATUS IN ('50','70')
			AND	C.MEMBER_STATUS = '1'
			
			<!-- 기본계약/ 형제추가일 경우만 :: 시간.횟수추가는 제외 -->
			AND C.CONTRACT_TYPE != '3'
			
			<!-- 회원계약코드 -->				
			<if test="map.custCd != null and map.custCd != ''">  
					AND A.CUST_CD = #{map.custCd}
			</if>     
			 			
			<if test="map.childCd != null and map.childCd != ''">  
					AND C.CHILD_CD = #{map.childCd}
			</if>      			
						
			<!-- 검색유형 학생명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '10'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   C.CHILDREN_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>       
	        	
			<!-- 검색유형 학부모명-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '20'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   A.GD1_NM LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학생휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '30'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(C.CHILDREN_HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 학무모휴대폰-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '40'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND REPLACE(A.HP_NO,'-','')  LIKE UPPER('%'+#{map.searchText}+'%')
		  			]]>
			</if>     
	        	
			<!-- 검색유형 주소-->
			<if test="map.searchType != null and map.searchType != '' and map.searchType eq '50'.toString() and map.searchText != null and map.searchText != ''">  
					<![CDATA[  
		      			AND   (A.HOME_ZIPCODE LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS1 LIKE UPPER('%'+#{map.searchText}+'%') OR A.HOME_ADDRESS2 LIKE UPPER('%'+#{map.searchText}+'%'))
		  			]]>
			</if>     
    </select>
</mapper>
